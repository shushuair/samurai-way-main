import {createSlice} from "@reduxjs/toolkit";
import {User, UserResponse, UsersParams} from "../api/typeApi";
import {CreateAppAsyncThunk} from "../hooks/CreateAppAsyncThunk";
import {usersApi} from "../api/users.api";
import {appActions} from "./appReducer";
import {handleServerNetworkError} from "../utils/error.utils";


type EntityStatus = "idle" | "loading" | "succeeded" | "failed"
export type DomainUser = User & {
    "entityStatus": EntityStatus
}
//entityStatus to disable button follow/unfollow when click by mistake twice
const slice = createSlice({
    name: "users",
    initialState: {
        users: [] as DomainUser[],
        totalCount: 0
    },
    reducers: {},
    extraReducers: (builder) => {
        //builder to check test
        builder
            .addCase(usersThunks.getUsers.fulfilled, (state, action) => {
                return {
                    users: action.payload.users.items.map(user => ({...user, entityStatus: "idle"})),
                    totalCount: action.payload.users.totalCount
                }
            })
    }
})

// const getUsers = CreateAppAsyncThunk<{users: UserResponse}, {count?: number
//     page?: number
//     term?: string
//     friend?: boolean} | undefined>(
//     "users/getUsers",
//     async (arg= {} , thunkAPI) => {
//         const {dispatch, rejectWithValue} = thunkAPI
//         dispatch(appActions.setAppStatus({status: "loading"}))
//
//         try {
//             const res = await usersApi.getUsers(arg)
//             dispatch(appActions.setAppStatus({status: "succeeded"}))
//             return {users: res.data}
//         } catch (e) {
//             handleServerNetworkError(e, dispatch)
//             return rejectWithValue(null)
//         }
//     }
// )

const getUsers = CreateAppAsyncThunk<{users: UserResponse}, void>(
    "users/getUsers",
    async (_ , thunkAPI) => {
        const {dispatch, rejectWithValue} = thunkAPI
        dispatch(appActions.setAppStatus({status: "loading"}))
        try {
            const res = await usersApi.getUsers()
            dispatch(appActions.setAppStatus({status: "succeeded"}))
            return {users: res.data}
        } catch (e) {
            handleServerNetworkError(e, dispatch)
            return rejectWithValue(null)
        }
    }
)


export const usersThunks = {getUsers}
export const usersActions = slice.actions
export const usersReducer = slice.reducer











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































